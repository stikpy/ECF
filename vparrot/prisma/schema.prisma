generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             Int
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?

//   user users @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  // users         users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model testimonials {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  date        DateTime? @default(now()) @db.Timestamp(6)
  rating      Int?
  message     String?   @db.VarChar(255)
  status      String?   @default("hors ligne") @db.VarChar(20)
  isValidated Boolean?  @default(false)

}






model OpeningHours {
  id       Int      @id @default(autoincrement())
  day      String  
  timeSlots String[] 
  modifiers   Modifier[]
}

model TextContent {
  id       Int      @id @default(autoincrement())
  slug     String   @unique
  title    String?
  content  String
  modifiers   Modifier[]

}

model Services {
  id      Int      @id @default(autoincrement())
  title    String? 
  description String?
  imageUrl String?
  descriptionShort String?
  modifiers   Modifier[]
}

model carPosts {
  id          Int          @id @default(autoincrement())
  title       String?      @db.VarChar(255)
  description String?
  price       Int?
  imageUrl    String?      @db.VarChar(255)
  km          Int?
  year        Int?
  userId      Int?
  users        users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id        Int        @id @default(autoincrement())
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  firstname String?    @db.VarChar(255)
  lastname  String?    @db.VarChar(255)
  role      String    @db.VarChar(50)
  carPosts  carPosts[]
}

model ContactForm{
id Int @id @default(autoincrement())
lastname String @db.VarChar(255)
firstname String @db.VarChar(255)
phone String @db.VarChar(50)
message String @db.VarChar(255)
subject String @db.VarChar(255)
email String @db.VarChar(255)
}

model CarDetails {
  id Int @id @default(autoincrement())
  brand String @db.VarChar(50)
  model String @db.VarChar(50)
  power Int @db.Integer()
  fuelType String @db.VarChar(50)
  transmission String @db.VarChar(50)
  color String @db.VarChar(50)
  firstHand Boolean
}

model Modifier{
  id Int @id @default(autoincrement())
  openingHoursId     Int?
  textContentId      Int?
  servicesId         Int?
  openingHour        OpeningHours?     @relation(fields: [openingHoursId], references: [id], onDelete: Cascade)
  textContent        TextContent?      @relation(fields: [textContentId], references: [id], onDelete: Cascade)
  services           Services?         @relation(fields: [servicesId], references: [id], onDelete: Cascade)

}