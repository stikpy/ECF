"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/highlight-words";
exports.ids = ["vendor-chunks/highlight-words"];
exports.modules = {

/***/ "(ssr)/./node_modules/highlight-words/dist/highlight-words.js":
/*!**************************************************************!*\
  !*** ./node_modules/highlight-words/dist/highlight-words.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nlet IDX = 36;\nlet HEX = \"\";\nwhile (IDX--) {\n  HEX += IDX.toString(36);\n}\nfunction uid(len = 11) {\n  let str = \"\";\n  let num = len;\n  while (num--) {\n    str += HEX[Math.random() * 36 | 0];\n  }\n  return str;\n}\n\nconst escapeRegexp = (term) => term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char) => `\\\\${char}`);\nconst termsToRegExpString = (terms) => terms.replace(/\\s{2,}/g, \" \").split(\" \").join(\"|\");\nconst regexpQuery = ({\n  terms,\n  matchExactly = false\n}) => {\n  if (typeof terms !== \"string\") {\n    throw new TypeError(\"Expected a string\");\n  }\n  const escapedTerms = escapeRegexp(terms.trim());\n  return `(${matchExactly ? escapedTerms : termsToRegExpString(escapedTerms)})`;\n};\nconst buildRegexp = ({\n  terms,\n  matchExactly = false\n}) => {\n  try {\n    const fromString = /^([/~@;%#'])(.*?)\\1([gimsuy]*)$/.exec(terms);\n    if (fromString) {\n      return new RegExp(fromString[2], fromString[3]);\n    }\n    return new RegExp(regexpQuery({ terms, matchExactly }), \"ig\");\n  } catch (e) {\n    throw new TypeError(\"Expected terms to be either a string or a RegExp!\");\n  }\n};\n\nconst hasProp = (prop) => (obj) => obj !== null && typeof obj === \"object\" && prop in obj;\nconst hasMatch = hasProp(\"match\");\nconst chunkExists = (chunk) => typeof chunk !== \"undefined\";\nfunction clip({\n  curr,\n  next,\n  prev,\n  clipBy = 3\n}) {\n  const words = curr.text.split(\" \");\n  const len = words.length;\n  if (curr.match || clipBy >= len) {\n    return curr.text;\n  }\n  const ellipsis = \"...\";\n  if (chunkExists(next) && chunkExists(prev) && hasMatch(prev) && hasMatch(next)) {\n    if (len > clipBy * 2) {\n      return [\n        ...words.slice(0, clipBy),\n        ellipsis,\n        ...words.slice(-clipBy)\n      ].join(\" \");\n    }\n    return curr.text;\n  }\n  if (chunkExists(next) && hasMatch(next)) {\n    return [ellipsis, ...words.slice(-clipBy)].join(\" \");\n  }\n  if (chunkExists(prev) && hasMatch(prev)) {\n    return [...words.slice(0, clipBy), ellipsis].join(\" \");\n  }\n  return curr.text;\n}\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst hasLength = (str) => str.length > 0;\nconst highlightWords = ({\n  text,\n  query,\n  clipBy,\n  matchExactly = false\n}) => {\n  const safeQuery = typeof query === \"string\" ? query.trim() : query;\n  if (safeQuery === \"\") {\n    return [\n      {\n        key: uid(),\n        text,\n        match: false\n      }\n    ];\n  }\n  const searchRegexp = buildRegexp({ terms: query, matchExactly });\n  return text.split(searchRegexp).filter(hasLength).map((str) => ({\n    // Compose the object for a match\n    key: uid(),\n    text: str,\n    match: matchExactly ? str.toLowerCase() === safeQuery.toLowerCase() : searchRegexp.test(str)\n  })).map((chunk, index, chunks) => __spreadValues(__spreadValues({}, chunk), typeof clipBy === \"number\" && {\n    // We only overwrite the text if there is a clip\n    text: clip(__spreadProps(__spreadValues(__spreadValues({\n      curr: chunk\n    }, index < chunks.length - 1 && { next: chunks[index + 1] }), index > 0 && { prev: chunks[index - 1] }), {\n      // If this wasn't the first chunk, set the previous chunk\n      clipBy\n    }))\n  }));\n};\n\nexports[\"default\"] = highlightWords;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LXdvcmRzL2Rpc3QvaGlnaGxpZ2h0LXdvcmRzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbURBQW1ELGdDQUFnQyxLQUFLO0FBQ3hGLHlEQUF5RCxHQUFHO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQWdFO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxxQkFBcUI7QUFDekQsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsNkRBQTZEO0FBQzNJO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDRCQUE0QjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxpRUFBaUU7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsS0FBSyxpQ0FBaUMseUJBQXlCLGtCQUFrQix5QkFBeUI7QUFDMUc7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LXdvcmRzL2Rpc3QvaGlnaGxpZ2h0LXdvcmRzLmpzPzkyYjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5sZXQgSURYID0gMzY7XG5sZXQgSEVYID0gXCJcIjtcbndoaWxlIChJRFgtLSkge1xuICBIRVggKz0gSURYLnRvU3RyaW5nKDM2KTtcbn1cbmZ1bmN0aW9uIHVpZChsZW4gPSAxMSkge1xuICBsZXQgc3RyID0gXCJcIjtcbiAgbGV0IG51bSA9IGxlbjtcbiAgd2hpbGUgKG51bS0tKSB7XG4gICAgc3RyICs9IEhFWFtNYXRoLnJhbmRvbSgpICogMzYgfCAwXTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG5jb25zdCBlc2NhcGVSZWdleHAgPSAodGVybSkgPT4gdGVybS5yZXBsYWNlKC9bfFxcXFx7fSgpW1xcXV4kKyo/Li1dL2csIChjaGFyKSA9PiBgXFxcXCR7Y2hhcn1gKTtcbmNvbnN0IHRlcm1zVG9SZWdFeHBTdHJpbmcgPSAodGVybXMpID0+IHRlcm1zLnJlcGxhY2UoL1xcc3syLH0vZywgXCIgXCIpLnNwbGl0KFwiIFwiKS5qb2luKFwifFwiKTtcbmNvbnN0IHJlZ2V4cFF1ZXJ5ID0gKHtcbiAgdGVybXMsXG4gIG1hdGNoRXhhY3RseSA9IGZhbHNlXG59KSA9PiB7XG4gIGlmICh0eXBlb2YgdGVybXMgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBzdHJpbmdcIik7XG4gIH1cbiAgY29uc3QgZXNjYXBlZFRlcm1zID0gZXNjYXBlUmVnZXhwKHRlcm1zLnRyaW0oKSk7XG4gIHJldHVybiBgKCR7bWF0Y2hFeGFjdGx5ID8gZXNjYXBlZFRlcm1zIDogdGVybXNUb1JlZ0V4cFN0cmluZyhlc2NhcGVkVGVybXMpfSlgO1xufTtcbmNvbnN0IGJ1aWxkUmVnZXhwID0gKHtcbiAgdGVybXMsXG4gIG1hdGNoRXhhY3RseSA9IGZhbHNlXG59KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZnJvbVN0cmluZyA9IC9eKFsvfkA7JSMnXSkoLio/KVxcMShbZ2ltc3V5XSopJC8uZXhlYyh0ZXJtcyk7XG4gICAgaWYgKGZyb21TdHJpbmcpIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKGZyb21TdHJpbmdbMl0sIGZyb21TdHJpbmdbM10pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleHBRdWVyeSh7IHRlcm1zLCBtYXRjaEV4YWN0bHkgfSksIFwiaWdcIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgdGVybXMgdG8gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGEgUmVnRXhwIVwiKTtcbiAgfVxufTtcblxuY29uc3QgaGFzUHJvcCA9IChwcm9wKSA9PiAob2JqKSA9PiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBwcm9wIGluIG9iajtcbmNvbnN0IGhhc01hdGNoID0gaGFzUHJvcChcIm1hdGNoXCIpO1xuY29uc3QgY2h1bmtFeGlzdHMgPSAoY2h1bmspID0+IHR5cGVvZiBjaHVuayAhPT0gXCJ1bmRlZmluZWRcIjtcbmZ1bmN0aW9uIGNsaXAoe1xuICBjdXJyLFxuICBuZXh0LFxuICBwcmV2LFxuICBjbGlwQnkgPSAzXG59KSB7XG4gIGNvbnN0IHdvcmRzID0gY3Vyci50ZXh0LnNwbGl0KFwiIFwiKTtcbiAgY29uc3QgbGVuID0gd29yZHMubGVuZ3RoO1xuICBpZiAoY3Vyci5tYXRjaCB8fCBjbGlwQnkgPj0gbGVuKSB7XG4gICAgcmV0dXJuIGN1cnIudGV4dDtcbiAgfVxuICBjb25zdCBlbGxpcHNpcyA9IFwiLi4uXCI7XG4gIGlmIChjaHVua0V4aXN0cyhuZXh0KSAmJiBjaHVua0V4aXN0cyhwcmV2KSAmJiBoYXNNYXRjaChwcmV2KSAmJiBoYXNNYXRjaChuZXh0KSkge1xuICAgIGlmIChsZW4gPiBjbGlwQnkgKiAyKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAuLi53b3Jkcy5zbGljZSgwLCBjbGlwQnkpLFxuICAgICAgICBlbGxpcHNpcyxcbiAgICAgICAgLi4ud29yZHMuc2xpY2UoLWNsaXBCeSlcbiAgICAgIF0uam9pbihcIiBcIik7XG4gICAgfVxuICAgIHJldHVybiBjdXJyLnRleHQ7XG4gIH1cbiAgaWYgKGNodW5rRXhpc3RzKG5leHQpICYmIGhhc01hdGNoKG5leHQpKSB7XG4gICAgcmV0dXJuIFtlbGxpcHNpcywgLi4ud29yZHMuc2xpY2UoLWNsaXBCeSldLmpvaW4oXCIgXCIpO1xuICB9XG4gIGlmIChjaHVua0V4aXN0cyhwcmV2KSAmJiBoYXNNYXRjaChwcmV2KSkge1xuICAgIHJldHVybiBbLi4ud29yZHMuc2xpY2UoMCwgY2xpcEJ5KSwgZWxsaXBzaXNdLmpvaW4oXCIgXCIpO1xuICB9XG4gIHJldHVybiBjdXJyLnRleHQ7XG59XG5cbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fc3ByZWFkVmFsdWVzID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxuICAgIGlmIChfX2hhc093blByb3AuY2FsbChiLCBwcm9wKSlcbiAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKGIpKSB7XG4gICAgICBpZiAoX19wcm9wSXNFbnVtLmNhbGwoYiwgcHJvcCkpXG4gICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgICB9XG4gIHJldHVybiBhO1xufTtcbnZhciBfX3NwcmVhZFByb3BzID0gKGEsIGIpID0+IF9fZGVmUHJvcHMoYSwgX19nZXRPd25Qcm9wRGVzY3MoYikpO1xuY29uc3QgaGFzTGVuZ3RoID0gKHN0cikgPT4gc3RyLmxlbmd0aCA+IDA7XG5jb25zdCBoaWdobGlnaHRXb3JkcyA9ICh7XG4gIHRleHQsXG4gIHF1ZXJ5LFxuICBjbGlwQnksXG4gIG1hdGNoRXhhY3RseSA9IGZhbHNlXG59KSA9PiB7XG4gIGNvbnN0IHNhZmVRdWVyeSA9IHR5cGVvZiBxdWVyeSA9PT0gXCJzdHJpbmdcIiA/IHF1ZXJ5LnRyaW0oKSA6IHF1ZXJ5O1xuICBpZiAoc2FmZVF1ZXJ5ID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAga2V5OiB1aWQoKSxcbiAgICAgICAgdGV4dCxcbiAgICAgICAgbWF0Y2g6IGZhbHNlXG4gICAgICB9XG4gICAgXTtcbiAgfVxuICBjb25zdCBzZWFyY2hSZWdleHAgPSBidWlsZFJlZ2V4cCh7IHRlcm1zOiBxdWVyeSwgbWF0Y2hFeGFjdGx5IH0pO1xuICByZXR1cm4gdGV4dC5zcGxpdChzZWFyY2hSZWdleHApLmZpbHRlcihoYXNMZW5ndGgpLm1hcCgoc3RyKSA9PiAoe1xuICAgIC8vIENvbXBvc2UgdGhlIG9iamVjdCBmb3IgYSBtYXRjaFxuICAgIGtleTogdWlkKCksXG4gICAgdGV4dDogc3RyLFxuICAgIG1hdGNoOiBtYXRjaEV4YWN0bHkgPyBzdHIudG9Mb3dlckNhc2UoKSA9PT0gc2FmZVF1ZXJ5LnRvTG93ZXJDYXNlKCkgOiBzZWFyY2hSZWdleHAudGVzdChzdHIpXG4gIH0pKS5tYXAoKGNodW5rLCBpbmRleCwgY2h1bmtzKSA9PiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgY2h1bmspLCB0eXBlb2YgY2xpcEJ5ID09PSBcIm51bWJlclwiICYmIHtcbiAgICAvLyBXZSBvbmx5IG92ZXJ3cml0ZSB0aGUgdGV4dCBpZiB0aGVyZSBpcyBhIGNsaXBcbiAgICB0ZXh0OiBjbGlwKF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgY3VycjogY2h1bmtcbiAgICB9LCBpbmRleCA8IGNodW5rcy5sZW5ndGggLSAxICYmIHsgbmV4dDogY2h1bmtzW2luZGV4ICsgMV0gfSksIGluZGV4ID4gMCAmJiB7IHByZXY6IGNodW5rc1tpbmRleCAtIDFdIH0pLCB7XG4gICAgICAvLyBJZiB0aGlzIHdhc24ndCB0aGUgZmlyc3QgY2h1bmssIHNldCB0aGUgcHJldmlvdXMgY2h1bmtcbiAgICAgIGNsaXBCeVxuICAgIH0pKVxuICB9KSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBoaWdobGlnaHRXb3JkcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight-words/dist/highlight-words.js\n");

/***/ })

};
;